on:
  push:
    branches: ["master", "tokio-*.x"]
  pull_request:
    branches: ["master", "tokio-*.x"]

name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  # Change to specific Rust release to pin
  rust_stable: stable
  rust_nightly: nightly-2023-10-21
  rust_clippy: '1.76'
  # When updating this, also update:
  # - README.md
  # - tokio/README.md
  # - CONTRIBUTING.md
  # - tokio/Cargo.toml
  # - tokio-util/Cargo.toml
  # - tokio-test/Cargo.toml
  # - tokio-stream/Cargo.toml
  rust_min: '1.63'

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  # Depends on all actions that are required for a "successful" CI run.
  tests-pass:
    name: all systems go
    runs-on: ubuntu-latest
    needs:
      - cross-test-with-parking_lot
    steps:
      - run: exit 0

  # Basic actions that must pass before we kick off more expensive tests.
  basics:
    name: basic checks
    runs-on: ubuntu-latest
    needs:
      - clippy
    steps:
      - run: exit 0

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_clippy }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.rust_clippy }}
          components: clippy
      - uses: Swatinem/rust-cache@v2
      # Run clippy
      - name: "clippy --all"
        run: cargo clippy --all --tests --all-features --no-deps

  cross-test-with-parking_lot:
    needs: basics
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: i686-unknown-linux-gnu
            rustflags: --cfg tokio_taskdump
          - target: armv5te-unknown-linux-gnueabi
          - target: armv7-unknown-linux-gnueabihf
          - target: aarch64-unknown-linux-gnu
            rustflags: --cfg tokio_taskdump
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.rust_stable }}
          target: ${{ matrix.target }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
      - name: Tests run with all features (including parking_lot)
        run: |
          set -euxo pipefail
          cargo nextest run -p tokio --all-features --target ${{ matrix.target }}
          cargo test --doc -p tokio --all-features --target ${{ matrix.target }}
        env:
          RUST_TEST_THREADS: 1
          RUSTFLAGS: --cfg tokio_unstable -Dwarnings --cfg tokio_no_tuning_tests ${{ matrix.rustflags }}

  cross-test-without-parking_lot:
    needs: basics
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: i686-unknown-linux-gnu
            rustflags: --cfg tokio_taskdump
          - target: armv5te-unknown-linux-gnueabi
          - target: armv7-unknown-linux-gnueabihf
          - target: aarch64-unknown-linux-gnu
            rustflags: --cfg tokio_taskdump
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.rust_stable }}
          target: ${{ matrix.target }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Remove `parking_lot` from `full` feature
        run: sed -i '0,/parking_lot/{/parking_lot/d;}' tokio/Cargo.toml

      - uses: Swatinem/rust-cache@v2
      # The `tokio_no_parking_lot` cfg is here to ensure the `sed` above does not silently break.
      - name: Tests run with all features (without parking_lot)
        run: |
          set -euxo pipefail
          cargo nextest run -p tokio --features full,test-util --target ${{ matrix.target }}
          cargo test --doc -p tokio --features full,test-util --target ${{ matrix.target }}
        env:
          RUST_TEST_THREADS: 1
          RUSTFLAGS: --cfg tokio_unstable -Dwarnings --cfg tokio_no_parking_lot --cfg tokio_no_tuning_tests ${{ matrix.rustflags }}


